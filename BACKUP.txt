rpc_print_data: (1)

    // char data2_buffer[data->data2_len + 1];
    // strcpy(data2_buffer, (char*)data->data2);
    // data2_buffer[data->data2_len] = '\0';
    // // snprintf(data2_buffer, payload->data2_len, "%d", )
    // printf("-%p\n", data->data2);
    // printf("--%s\n", (char*)data->data2);

    // printf("---");
    // unsigned char ptr2[data->data2_len];
    // unsigned char *ptr = data->data2;
    // // printf("============= %s\n", ptr);
    // for (int i = 0; i < data->data2_len; i++) {
    //     printf("%02x ", (char)ptr[i]);
    //     data2_buffer[i] = (char)ptr[i];
    //     ptr2[i] = ((char *)data->data2)[i];
    // }
    // ptr2[data->data2_len] = '\0';
    // printf("\n");
    // void* unkow = ptr;
    // printf("/%p\n", unkow);
    // printf("//%s\n", (char*)unkow);
    // printf("\\\\%s\n", ptr2);
    
    // printf("...%s\n", data2_buffer);

rpc_print_data: (2)

    // char data1_buffer[MAX_INT_LENGTH];
    // snprintf(data1_buffer, MAX_INT_LENGTH, "%d", data->data1);
    // printf("data1: %s\n", data1_buffer);

    // char data2_len[MAX_INT_LENGTH];
    // snprintf(data2_len, MAX_INT_LENGTH, "%d", (int)data->data2_len);
    // printf("data2_len: %s\n", data2_len);

    // if (data->data2_len > 0) {
    //     unsigned char *data2_char = data->data2;
    //     printf("data2: %s\n", data2_char);
    // }





------------------
rpc_serve_all:
    // // ========================================================================
    // // temp change to test read-write
    // char buffer[256];
    // // Read characters from the connection, then process
	// int n = read(srv->newsockfd, buffer, 255); // n is number of characters read
	// if (n < 0) {
	// 	perror("read");
	// 	exit(EXIT_FAILURE);
	// }
	// // Null-terminate string
	// buffer[n] = '\0';

	// // Write message back
	// printf("Here is the message: %s\n", buffer);
	// n = write(srv->newsockfd, "I got your message\n", 19);
	// if (n < 0) {
	// 	perror("write");
	// 	exit(EXIT_FAILURE);
	// }
    // // ........................................................................

client.c (main):
    // // ========================================================================
    // // temp change to test read-write
    // char buffer[256];
    // // Read message from stdin
	// printf("Please enter the message: ");
	// if (fgets(buffer, 255, stdin) == NULL) {
	// 	exit(EXIT_SUCCESS);
	// }
	// // Remove \n that was read by fgets
	// buffer[strlen(buffer) - 1] = 0;

    // // Send message to server
	// int n = write(return_sockfd(client), buffer, strlen(buffer));
	// if (n < 0) {
	// 	perror("socket");
	// 	exit(EXIT_FAILURE);
	// }    
    // // Read message from server
	// n = read(return_sockfd(client), buffer, 255);
	// if (n < 0) {
	// 	perror("read");
	// 	exit(EXIT_FAILURE);
	// }
	// // Null-terminate string
	// buffer[n] = '\0';
	// printf("%s\n", buffer);
    // // ........................................................................


rpc.c (rpc_serve_all):
    // -- Printing connection details -- (commented out)
    // struct sockaddr_in client_addr;
    // char ip[INET6_ADDRSTRLEN];
    // int port;
    // getpeername(srv->newsockfd, (struct sockaddr*)&client_addr, 
    //                         &(srv->client_addr_size));
    // // getpeername(srv->newsockfd, (struct sockaddr*) &(srv->client_addr), 
    // //                         &(srv->client_addr_size));
    // inet_ntop(client_addr.sin_family, &client_addr.sin_addr, ip, INET6_ADDRSTRLEN);
    // // inet_ntop(srv->client_addr.sin_family, &(srv->client_addr.sin_addr), ip, INET6_ADDRSTRLEN);
    // port = ntohs(srv->client_addr.sin_port);
    // printf("New connection from %s:%d on socket %d\n", ip, port, srv->newsockfd);